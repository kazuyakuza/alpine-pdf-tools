name: Test Docker Image Build

on:
  pull_request:

jobs:
  read-compatibility:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.read_compatibility.outputs.json }}  # Pass to next job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read compatibility list
        id: read_compatibility
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const compatibilityList = JSON.parse(fs.readFileSync('./compatibility-list.json', 'utf8'));
            core.setOutput('json', JSON.stringify(compatibilityList));

  test-build:
    runs-on: ubuntu-latest
    needs: read-compatibility  # Wait for previous job
    strategy:
      matrix:
        combination: ${{ fromJson(needs.read-compatibility.outputs.matrix).combinations }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate build arguments
        id: build_args
        uses: actions/github-script@v6
        with:
          script: |
            let args = [];
            if ('${{ matrix.combination.nodejs }}' !== 'latest') {
              args.push(`--build-arg NODE_VERSION=${{ matrix.combination.nodejs }}`);
            }
            if ('${{ matrix.combination.qpdf }}' !== 'latest') {
              args.push(`--build-arg QPDF_VERSION=${{ matrix.combination.qpdf }}`);
            }
            if ('${{ matrix.combination.ghostscript }}' !== 'latest') {
              args.push(`--build-arg GHOSTSCRIPT_VERSION=${{ matrix.combination.ghostscript }}`);
            }
            core.setOutput('args', args.join(' '));  # Space-separated list, not \n

      - name: Build Docker image
        run: |
          docker build ${{ steps.build_args.outputs.args }} -t alpine-pdf-tools:test .
