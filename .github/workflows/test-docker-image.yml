name: Test Docker Image Build

on:
  pull_request:

jobs:
  read-compatibility:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.read_compatibility.outputs.json }}  # Pass to next job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read compatibility list
        id: read_compatibility
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const compatibilityList = JSON.parse(fs.readFileSync('./compatibility-list.json', 'utf8'));
            core.setOutput('json', JSON.stringify(compatibilityList));

  test-build:
    runs-on: ubuntu-latest
    needs: read-compatibility  # Wait for previous job
    strategy:
      matrix:
        combination: ${{ fromJson(needs.read-compatibility.outputs.matrix).combinations }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate build arguments
        id: build_args
        uses: actions/github-script@v6
        with:
          script: |
            let args = [];
            if ('${{ matrix.combination.nodejs }}' !== 'latest') {
              args.push(`--build-arg NODE_VERSION=${{ matrix.combination.nodejs }}`);
            }
            if ('${{ matrix.combination.qpdf }}' !== 'latest') {
              args.push(`--build-arg QPDF_VERSION=${{ matrix.combination.qpdf }}`);
            }
            if ('${{ matrix.combination.ghostscript }}' !== 'latest') {
              args.push(`--build-arg GHOSTSCRIPT_VERSION=${{ matrix.combination.ghostscript }}`);
            }
            core.setOutput('args', args.join(' '));

      - name: Build Docker image
        run: |
          docker build ${{ steps.build_args.outputs.args }} -t alpine-pdf-tools:test .

      - name: Run Docker image and get versions
        id: run_image
        run: |
          docker run alpine-pdf-tools:test | tee output.txt
          echo "stdout=$(cat output.txt)" >> $GITHUB_OUTPUT

      - name: Compare versions
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync(process.env.GITHUB_OUTPUT, 'utf8').match(/stdout=(.*)/)[1];
            const expectedNodeVersion = '${{ matrix.combination.nodejs }}' === 'latest' ? 'latest' : '${{ matrix.combination.nodejs }}';
            const expectedQpdfVersion = '${{ matrix.combination.qpdf }}' === 'latest' ? 'latest' : '${{ matrix.combination.qpdf }}';
            const expectedGsVersion = '${{ matrix.combination.ghostscript }}' === 'latest' ? 'latest' : '${{ matrix.combination.ghostscript }}';

            const nodeVersionMatch = output.match(/----node-version\nv([\d.]+)/);
            const qpdfVersionMatch = output.match(/----qpdf-version\nqpdf version ([\d.]+)/);
            const gsVersionMatch = output.match(/----ghostscript-version\n([\d.]+)/);

            const actualNodeVersion = nodeVersionMatch ? nodeVersionMatch[1] : null;
            const actualQpdfVersion = qpdfVersionMatch ? qpdfVersionMatch[1] : null;
            const actualGsVersion = gsVersionMatch ? gsVersionMatch[1] : null;

            if (expectedNodeVersion !== 'latest' && actualNodeVersion !== expectedNodeVersion) {
              core.setFailed(`Node.js version mismatch. Expected: ${expectedNodeVersion}, Actual: ${actualNodeVersion}`);
            } else if (expectedNodeVersion === 'latest') {
                core.info(`Node.js version check skipped because 'latest' was specified.`);
            }
            if (expectedQpdfVersion !== 'latest' && actualQpdfVersion !== expectedQpdfVersion) {
              core.setFailed(`qpdf version mismatch. Expected: ${expectedQpdfVersion}, Actual: ${actualQpdfVersion}`);
            } else if (expectedQpdfVersion === 'latest') {
                core.info(`qpdf version check skipped because 'latest' was specified.`);
            }
            if (expectedGsVersion !== 'latest' && actualGsVersion !== expectedGsVersion) {
              core.setFailed(`Ghostscript version mismatch. Expected: ${expectedGsVersion}, Actual: ${actualGsVersion}`);
            } else if (expectedGsVersion === 'latest'){
                core.info(`Ghostscript version check skipped because 'latest' was specified.`);
            }
