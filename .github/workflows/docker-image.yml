name: Build and Push Docker Image

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  read-compatibility:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      matrix: ${{ steps.read_compatibility.outputs.json }}  # Pass to next job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read compatibility list
        id: read_compatibility
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const compatibilityList = JSON.parse(fs.readFileSync('./compatibility-list.json', 'utf8'));
            core.setOutput('json', JSON.stringify(compatibilityList));

  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    needs: read-compatibility  # Wait for previous job
    strategy:
      matrix:
        combination: ${{ fromJson(needs.read-compatibility.outputs.matrix).combinations }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/alpine-pdf-tools
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}}-node{{matrix.combination.nodejs}}-qpdf{{matrix.combination.qpdf}}-gs{{matrix.combination.ghostscript}}
            type=semver,pattern={{major}}.{{minor}}-node{{matrix.combination.nodejs}}-qpdf{{matrix.combination.qpdf}}-gs{{matrix.combination.ghostscript}}
            type=sha
          labels: |
            org.opencontainers.image.description=Alpine Linux based Docker image with qpdf and Ghostscript for PDF manipulation. Supports multiple Node.js versions.

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Generate build arguments
        id: build_args
        uses: actions/github-script@v6
        with:
          script: |
            let args = [];
            if ('${{ matrix.combination.nodejs }}' !== 'latest') {
              args.push(`--build-arg NODE_VERSION=${{ matrix.combination.nodejs }}`);
            }
            if ('${{ matrix.combination.qpdf }}' !== 'latest') {
              args.push(`--build-arg QPDF_VERSION=${{ matrix.combination.qpdf }}`);
            }
            if ('${{ matrix.combination.ghostscript }}' !== 'latest') {
              args.push(`--build-arg GHOSTSCRIPT_VERSION=${{ matrix.combination.ghostscript }}`);
            }
            core.setOutput('args', args.join(' '));

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ steps.build_args.outputs.args }}

      - name: Update Docker Hub Image Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/alpine-pdf-tools
          short-description: ${{ github.event.repository.description }}
